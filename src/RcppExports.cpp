// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CP_rejection
NumericVector CP_rejection(int n, double mu, double nu);
RcppExport SEXP _multcp_CP_rejection(SEXP nSEXP, SEXP muSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(CP_rejection(n, mu, nu));
    return rcpp_result_gen;
END_RCPP
}
// delta_limits_cpp
NumericVector delta_limits_cpp(NumericVector Z);
RcppExport SEXP _multcp_delta_limits_cpp(SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_limits_cpp(Z));
    return rcpp_result_gen;
END_RCPP
}
// rcompois
List rcompois(int n, double mu, double nu);
RcppExport SEXP _multcp_rcompois(SEXP nSEXP, SEXP muSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rcompois(n, mu, nu));
    return rcpp_result_gen;
END_RCPP
}
// ratio_IS_d_cpp
List ratio_IS_d_cpp(int d_R, NumericVector lambda, NumericVector nu, double omega, int N_aux);
RcppExport SEXP _multcp_ratio_IS_d_cpp(SEXP d_RSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP omegaSEXP, SEXP N_auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d_R(d_RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux(N_auxSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_IS_d_cpp(d_R, lambda, nu, omega, N_aux));
    return rcpp_result_gen;
END_RCPP
}
// ratios_IS_cpp
List ratios_IS_cpp(NumericVector lambda, NumericVector nu, double omega, int N_aux);
RcppExport SEXP _multcp_ratios_IS_cpp(SEXP lambdaSEXP, SEXP nuSEXP, SEXP omegaSEXP, SEXP N_auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux(N_auxSEXP);
    rcpp_result_gen = Rcpp::wrap(ratios_IS_cpp(lambda, nu, omega, N_aux));
    return rcpp_result_gen;
END_RCPP
}
// est_logZinv_d_cpp
List est_logZinv_d_cpp(int d_R, NumericVector lambda, NumericVector nu, int N_aux);
RcppExport SEXP _multcp_est_logZinv_d_cpp(SEXP d_RSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP N_auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d_R(d_RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux(N_auxSEXP);
    rcpp_result_gen = Rcpp::wrap(est_logZinv_d_cpp(d_R, lambda, nu, N_aux));
    return rcpp_result_gen;
END_RCPP
}
// est_logZinv_cpp
List est_logZinv_cpp(NumericVector lambda, NumericVector nu, int N_aux);
RcppExport SEXP _multcp_est_logZinv_cpp(SEXP lambdaSEXP, SEXP nuSEXP, SEXP N_auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux(N_auxSEXP);
    rcpp_result_gen = Rcpp::wrap(est_logZinv_cpp(lambda, nu, N_aux));
    return rcpp_result_gen;
END_RCPP
}
// update_propsd_double
double update_propsd_double(double current_sd, double accept_rate, int nprops, double target_ac);
RcppExport SEXP _multcp_update_propsd_double(SEXP current_sdSEXP, SEXP accept_rateSEXP, SEXP npropsSEXP, SEXP target_acSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current_sd(current_sdSEXP);
    Rcpp::traits::input_parameter< double >::type accept_rate(accept_rateSEXP);
    Rcpp::traits::input_parameter< int >::type nprops(npropsSEXP);
    Rcpp::traits::input_parameter< double >::type target_ac(target_acSEXP);
    rcpp_result_gen = Rcpp::wrap(update_propsd_double(current_sd, accept_rate, nprops, target_ac));
    return rcpp_result_gen;
END_RCPP
}
// ln_proposal
List ln_proposal(double current_val, double sigma);
RcppExport SEXP _multcp_ln_proposal(SEXP current_valSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current_val(current_valSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ln_proposal(current_val, sigma));
    return rcpp_result_gen;
END_RCPP
}
// subset_nv
NumericVector subset_nv(NumericVector vec, int stop);
RcppExport SEXP _multcp_subset_nv(SEXP vecSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_nv(vec, stop));
    return rcpp_result_gen;
END_RCPP
}
// asymptotic_z
double asymptotic_z(double lambda, double nu);
RcppExport SEXP _multcp_asymptotic_z(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(asymptotic_z(lambda, nu));
    return rcpp_result_gen;
END_RCPP
}
// estimate_loglik
double estimate_loglik(NumericMatrix Y, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, int N_aux_z, int N_aux_r);
RcppExport SEXP _multcp_estimate_loglik(SEXP YSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP N_aux_zSEXP, SEXP N_aux_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux_z(N_aux_zSEXP);
    Rcpp::traits::input_parameter< int >::type N_aux_r(N_aux_rSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_loglik(Y, lambda, nu, delta, omega, N_aux_z, N_aux_r));
    return rcpp_result_gen;
END_RCPP
}
// loglik_given_est
arma::vec loglik_given_est(NumericMatrix Y, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, NumericVector ratios, arma::vec log_inv_z);
RcppExport SEXP _multcp_loglik_given_est(SEXP YSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP ratiosSEXP, SEXP log_inv_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_inv_z(log_inv_zSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_given_est(Y, lambda, nu, delta, omega, ratios, log_inv_z));
    return rcpp_result_gen;
END_RCPP
}
// loglik_reg_given
List loglik_reg_given(NumericMatrix Y, NumericVector X, NumericVector gamma, NumericVector nu, NumericMatrix delta, double omega, NumericVector ratios, NumericVector log_inv_z);
RcppExport SEXP _multcp_loglik_reg_given(SEXP YSEXP, SEXP XSEXP, SEXP gammaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP ratiosSEXP, SEXP log_inv_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_inv_z(log_inv_zSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_reg_given(Y, X, gamma, nu, delta, omega, ratios, log_inv_z));
    return rcpp_result_gen;
END_RCPP
}
// kernel
double kernel(NumericVector Y, NumericVector ratios, double omega, NumericMatrix delta);
RcppExport SEXP _multcp_kernel(SEXP YSEXP, SEXP ratiosSEXP, SEXP omegaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel(Y, ratios, omega, delta));
    return rcpp_result_gen;
END_RCPP
}
// rmcomp_T
NumericMatrix rmcomp_T(int n, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, int N_r, int max_it, double tol);
RcppExport SEXP _multcp_rmcomp_T(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP N_rSEXP, SEXP max_itSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type N_r(N_rSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rmcomp_T(n, lambda, nu, delta, omega, N_r, max_it, tol));
    return rcpp_result_gen;
END_RCPP
}
// rmcomp
NumericMatrix rmcomp(int n, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, int N_r, int max_it, double tol);
RcppExport SEXP _multcp_rmcomp(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP N_rSEXP, SEXP max_itSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type N_r(N_rSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rmcomp(n, lambda, nu, delta, omega, N_r, max_it, tol));
    return rcpp_result_gen;
END_RCPP
}
// rmcomp_T_given
NumericMatrix rmcomp_T_given(int n, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, NumericVector ratios, double tol);
RcppExport SEXP _multcp_rmcomp_T_given(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP ratiosSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rmcomp_T_given(n, lambda, nu, delta, omega, ratios, tol));
    return rcpp_result_gen;
END_RCPP
}
// un_loglik_given
List un_loglik_given(int dim_R, NumericMatrix Y, NumericVector lambda, NumericVector nu, NumericMatrix delta, double omega, NumericVector ratios);
RcppExport SEXP _multcp_un_loglik_given(SEXP dim_RSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP ratiosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim_R(dim_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    rcpp_result_gen = Rcpp::wrap(un_loglik_given(dim_R, Y, lambda, nu, delta, omega, ratios));
    return rcpp_result_gen;
END_RCPP
}
// exchange_cpp
List exchange_cpp(NumericMatrix Y, NumericVector X, NumericVector gamma, NumericVector nu, NumericMatrix delta, double omega, NumericVector ratios);
RcppExport SEXP _multcp_exchange_cpp(SEXP YSEXP, SEXP XSEXP, SEXP gammaSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP omegaSEXP, SEXP ratiosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ratios(ratiosSEXP);
    rcpp_result_gen = Rcpp::wrap(exchange_cpp(Y, X, gamma, nu, delta, omega, ratios));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multcp_CP_rejection", (DL_FUNC) &_multcp_CP_rejection, 3},
    {"_multcp_delta_limits_cpp", (DL_FUNC) &_multcp_delta_limits_cpp, 1},
    {"_multcp_rcompois", (DL_FUNC) &_multcp_rcompois, 3},
    {"_multcp_ratio_IS_d_cpp", (DL_FUNC) &_multcp_ratio_IS_d_cpp, 5},
    {"_multcp_ratios_IS_cpp", (DL_FUNC) &_multcp_ratios_IS_cpp, 4},
    {"_multcp_est_logZinv_d_cpp", (DL_FUNC) &_multcp_est_logZinv_d_cpp, 4},
    {"_multcp_est_logZinv_cpp", (DL_FUNC) &_multcp_est_logZinv_cpp, 3},
    {"_multcp_update_propsd_double", (DL_FUNC) &_multcp_update_propsd_double, 4},
    {"_multcp_ln_proposal", (DL_FUNC) &_multcp_ln_proposal, 2},
    {"_multcp_subset_nv", (DL_FUNC) &_multcp_subset_nv, 2},
    {"_multcp_asymptotic_z", (DL_FUNC) &_multcp_asymptotic_z, 2},
    {"_multcp_estimate_loglik", (DL_FUNC) &_multcp_estimate_loglik, 7},
    {"_multcp_loglik_given_est", (DL_FUNC) &_multcp_loglik_given_est, 7},
    {"_multcp_loglik_reg_given", (DL_FUNC) &_multcp_loglik_reg_given, 8},
    {"_multcp_kernel", (DL_FUNC) &_multcp_kernel, 4},
    {"_multcp_rmcomp_T", (DL_FUNC) &_multcp_rmcomp_T, 8},
    {"_multcp_rmcomp", (DL_FUNC) &_multcp_rmcomp, 8},
    {"_multcp_rmcomp_T_given", (DL_FUNC) &_multcp_rmcomp_T_given, 7},
    {"_multcp_un_loglik_given", (DL_FUNC) &_multcp_un_loglik_given, 7},
    {"_multcp_exchange_cpp", (DL_FUNC) &_multcp_exchange_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_multcp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
